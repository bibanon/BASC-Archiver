#!/usr/bin/env python
# -*- coding: utf-8 -*-
# BASC Imageboard Archiver GUI
from __future__ import print_function
from __future__ import absolute_import
import random
import json
import sys
import os

import appdirs
from PySide import QtGui

from basc_archiver.gui import Ui_MainWindow
from basc_archiver import Options, Archiver


class GuiOptions(Options):
    def __init__(self, base_app_dir):
        # make sure data dir exists
        if not os.path.exists(base_app_dir):
            os.makedirs(base_app_dir)

        # open config file if it exists
        self._path = os.path.join(base_app_dir, 'config.json')
        self.config = {}
        self.load()

        # create settings
        base_dir = self.config.get('base_dir', os.path.join(os.path.expanduser('~'), 'thread-archive'))
        use_ssl = self.config.get('use_ssl', False)
        silent = self.config.get('silent', False)
        verbose = self.config.get('verbose', False)
        skip_thumbs = self.config.get('skip_thumbs', False)
        thumbs_only = self.config.get('thumbs_only', False)
        follow_child_threads = self.config.get('follow_child_threads', False)
        follow_to_other_boards = self.config.get('follow_to_other_boards', False)

        # create actual options object
        super(GuiOptions, self).__init__(base_dir, use_ssl=use_ssl,
                                         silent=silent, verbose=verbose,
                                         skip_thumbs=skip_thumbs, thumbs_only=thumbs_only,
                                         follow_child_threads=follow_child_threads,
                                         follow_to_other_boards=follow_to_other_boards)

    def load(self):
        try:
            with open(self._path, 'r') as config_file:
                config_string = config_file.read()
                self.config = json.loads(config_string)
        except FileNotFoundError:
            self.config = {}

    def save(self):
        with open(self._path, 'w') as config_file:
            config_string = json.dumps(self.config)
            config_file.write(config_string)
            config_file.write('\n')


class MainWindow(QtGui.QMainWindow, Ui_MainWindow):
    def __init__(self, parent=None, archiver=None):
        super(MainWindow, self).__init__(parent)
        self.setupUi(self)

        # make sure we have an archiver to attach to
        if archiver is None:
            raise Exception('The `archiver` attribute must be set when instantiating MainWindow')
        self.archiver = archiver

        # set options
        self.saveWarc.setEnabled(False)  # until we support WARC files

        # setting up thread list
        self.threadList.setEditTriggers(QtGui.QAbstractItemView.EditTriggers())  # disable cell editing
        self.threadList.setColumnCount(5)
        self.threadList.setHorizontalHeaderLabels(['Site', 'Board', 'Thead ID', 'Slug', 'Status'])
        self.threadList.verticalHeader().setVisible(False)  # hide row numbers
        self.threadList.horizontalHeader().setResizeMode(QtGui.QHeaderView.Stretch)

        # connecting slots
        self.actionAbout.triggered.connect(self.show_about)
        self.actionExit.triggered.connect(QtGui.qApp.quit)

        self.addThread.clicked.connect(self.add_thread)
        self.addFromClipboard.clicked.connect(self.add_from_clipboard)

    def show_about(self):
        QtGui.QMessageBox.about(self, 'BASC-Archiver', '<center><h1>BASC-Archiver</h1></center> The <b>BASC Archiver</b> is a Python library used to archive imageboard threads. It uses the 4chan API with the py4chan wrapper. Developers are free to use the BASC-Archiver library for some interesting third-party applications, as it is licensed under the LGPLv3.')

    def _add_thread_list_entry(self, site, board, thread_id, slug):
        self.threadList.insertRow(0)

        twi = QtGui.QTableWidgetItem(site)
        self.threadList.setItem(0, 0, twi)

        twi = QtGui.QTableWidgetItem(board)
        self.threadList.setItem(0, 1, twi)

        twi = QtGui.QTableWidgetItem(str(thread_id))
        self.threadList.setItem(0, 2, twi)

        twi = QtGui.QTableWidgetItem(slug)
        self.threadList.setItem(0, 3, twi)

        twi = QtGui.QTableWidgetItem('Waiting {} seconds'.format(random.randint(3, 180)))
        self.threadList.setItem(0, 4, twi)

    def add_thread(self):
        text = self.threadUrl.text()
        single_download = self.singleDownload.isChecked()
        minutes = self.checkMinutes.value()

        self._add_thread_list_entry('4chan', random.choice(['tg', 'gd', 'mu']), random.randint(100000,900000), 'description-of-thread')

        if text:
            print('adding thread:', text)
            if single_download:
                print('  only downloading thread once')
            else:
                print('  checking thread every', minutes, 'minutes')
            self.threadUrl.clear()

    def add_from_clipboard(self):
        print('adding thread from clipboard')

if __name__ == '__main__':
    random.seed()

    base_options_dir = appdirs.user_data_dir('thread-archiver', 'basc')
    options = GuiOptions(base_options_dir)
    archiver = Archiver(options)

    app = QtGui.QApplication(sys.argv)
    window = MainWindow(archiver=archiver)
    window.setWindowTitle('BASC-Archiver')
    window.show()
    sys.exit(app.exec_())
